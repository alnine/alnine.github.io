{"version":3,"sources":["utils/helpers.js","redux/reducers.js","constants/actionTypes.js","redux/store.js","common/Button/Button.style.js","common/Button/Button.jsx","components/Cell/Cell.style.js","components/Cell/Cell.jsx","components/Board/Board.style.js","components/Board/Board.jsx","components/Board/index.js","redux/actions.js","containers/App/App.style.js","containers/App/App.jsx","serviceWorker.js","index.js"],"names":["generateEmptyBoard","Array","fill","map","item","index","id","value","checkWinner","board","isArray","length","winner","forEach","line","a","b","c","initialState","history","currentBoard","currentPlayer","setsPlayed","stepsLeft","result","X","O","reducers","state","type","payload","newCurrentPlayer","updateHistory","slice","lastBoard","newBoard","store","createStore","DefaultButton","styled","button","Button","label","className","disabled","onClick","defaultProps","CellButton","Cell","StyledBoard","div","Board","plan","onCellClick","key","makeStep","writeResult","AppWrapper","connect","dispatch","isLastBoard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9dcc0816.chunk.js","sourcesContent":["export const generateEmptyBoard = () => {\n  const BOARD_SIZE = 9;\n  const initialArr = Array(BOARD_SIZE).fill({});\n\n  const emptyBoard = initialArr.map((item, index) => {\n    return { id: index, value: null };\n  });\n\n  return emptyBoard;\n};\n\nexport const checkWinner = board => {\n  if (typeof board === 'undefined') {\n    return null;\n  }\n\n  if (!Array.isArray(board) || board.length === 0) {\n    return null;\n  }\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  let winner = null;\n  lines.forEach(line => {\n    const [a, b, c] = line;\n    if (board[a].value && board[a].value === board[b].value && board[a].value === board[c].value) {\n      winner = board[a].value;\n    }\n  });\n\n  return winner;\n};\n\nexport default {\n  generateEmptyBoard,\n  checkWinner,\n};\n","import * as types from '../constants/actionTypes';\nimport { generateEmptyBoard } from '../utils/helpers';\n\nconst initialState = {\n  history: [generateEmptyBoard()],\n  currentBoard: 0,\n  currentPlayer: 'X',\n  setsPlayed: 0,\n  stepsLeft: 9,\n  result: {\n    X: 0,\n    O: 0,\n  },\n};\n\nconst reducers = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case types.MAKE_STEP: {\n      const newCurrentPlayer = payload.value === 'X' ? 'O' : 'X';\n      const updateHistory = state.history.slice(0, state.currentBoard + 1);\n      const lastBoard = updateHistory[updateHistory.length - 1];\n      const newBoard = [...lastBoard];\n      newBoard[payload.index] = {\n        id: payload.index,\n        value: payload.value,\n      };\n      return {\n        ...state,\n        history: [...updateHistory, newBoard],\n        currentBoard: state.currentBoard + 1,\n        currentPlayer: newCurrentPlayer,\n        stepsLeft: state.stepsLeft - 1,\n      };\n    }\n\n    case types.WRITE_RESULT: {\n      return {\n        ...state,\n        history: [generateEmptyBoard()],\n        currentBoard: 0,\n        currentPlayer: 'X',\n        setsPlayed: state.setsPlayed + 1,\n        stepsLeft: 9,\n        result: {\n          ...state.result,\n          [payload.winner]: state.result[payload.winner] + 1,\n        },\n      };\n    }\n\n    case types.PREV_BOARD: {\n      return {\n        ...state,\n        currentBoard: state.currentBoard - 1,\n        currentPlayer: state.currentPlayer === 'X' ? 'O' : 'X',\n        stepsLeft: state.stepsLeft + 1,\n      };\n    }\n\n    case types.NEXT_BOARD: {\n      return {\n        ...state,\n        currentBoard: state.currentBoard + 1,\n        currentPlayer: state.currentPlayer === 'X' ? 'O' : 'X',\n        stepsLeft: state.stepsLeft - 1,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;\n","export const MAKE_STEP = 'MAKE_STEP';\nexport const WRITE_RESULT = 'WRITE_RESULT';\nexport const PREV_BOARD = 'PREV_BOARD';\nexport const NEXT_BOARD = 'NEXT_BOARD';\n\nexport default { MAKE_STEP, WRITE_RESULT, PREV_BOARD, NEXT_BOARD };\n","import { createStore } from 'redux';\nimport reducers from './reducers';\n\nconst store = createStore(reducers);\n\nexport default store;\n","import styled from 'styled-components';\n\nconst DefaultButton = styled.button`\n  display: inline-block;\n  margin: 0;\n  padding: 0;\n  font: inherit;\n  border: none;\n  background: none;\n  cursor: pointer;\n  outline: none;\n\n  :disabled {\n    cursor: default;\n  }\n`;\n\nexport default DefaultButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultButton from './Button.style';\n\nconst Button = ({ label, className, disabled, onClick }) => {\n  return (\n    <DefaultButton className={className} onClick={onClick} disabled={disabled}>\n      {label}\n    </DefaultButton>\n  );\n};\n\nexport default Button;\n\nButton.propTypes = {\n  label: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  label: null,\n  className: null,\n  disabled: false,\n  onClick: null,\n};\n","import styled from 'styled-components';\nimport { Button } from '../../common/Button';\n\nconst CellButton = styled(Button)`\n  width: 2em;\n  height: 2em;\n  margin-top: -1px;\n  margin-right: -1px;\n  font-size: 1em;\n  font-weight: bold;\n  line-height: 2em;\n  text-align: center;\n  border: 1px solid #000000;\n`;\n\nexport default CellButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CellButton from './Cell.style';\n\nconst Cell = ({ value, onClick }) => {\n  return <CellButton label={value} onClick={onClick} />;\n};\n\nexport default Cell;\n\nCell.propTypes = {\n  value: PropTypes.string,\n};\n\nCell.defaultProps = {\n  value: null,\n};\n","import styled from 'styled-components';\n\nconst StyledBoard = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 6em;\n  font-size: 1.5em;\n`;\n\nexport default StyledBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Cell } from '../Cell';\nimport StyledBoard from './Board.style';\n\nconst Board = ({ plan, onCellClick }) => {\n  return (\n    <StyledBoard>\n      {plan &&\n        plan.map((item, index) => (\n          <Cell key={item.id} value={item.value} onClick={() => onCellClick(index)} />\n        ))}\n    </StyledBoard>\n  );\n};\n\nexport default Board;\n\nBoard.propTypes = {\n  plan: PropTypes.arrayOf(PropTypes.object),\n  onCellClick: PropTypes.func,\n};\n\nBoard.defaultProps = {\n  plan: null,\n  onCellClick: null,\n};\n","import Board from './Board';\n\nexport default Board;\nexport { Board };\n","import * as types from '../constants/actionTypes';\n\nexport const makeStep = (index, value) => {\n  return {\n    type: types.MAKE_STEP,\n    payload: {\n      index,\n      value,\n    },\n  };\n};\n\nexport const writeResult = winner => {\n  return {\n    type: types.WRITE_RESULT,\n    payload: {\n      winner,\n    },\n  };\n};\n\nexport const prevBoard = () => {\n  return {\n    type: types.PREV_BOARD,\n  };\n};\n\nexport const nextBoard = () => {\n  return {\n    type: types.NEXT_BOARD,\n  };\n};\n\nexport default { makeStep, writeResult, prevBoard, nextBoard };\n","import styled from 'styled-components';\n\nexport const AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 320px;\n  margin: 0 auto;\n  padding-top: 1em;\n  font-family: sans-serif;\n  font-size: 1.25rem;\n\n  p {\n    margin: 0;\n    text-align: center;\n    :first-child {\n      margin-top: 2em;\n    }\n  }\n\n  .history {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    margin-bottom: 1.5em;\n  }\n\n  .history-btn--prev {\n    ::before {\n      content: '\\u2190';\n      display: inline-block;\n      margin-right: 5px;\n    }\n  }\n\n  .history-btn--next {\n    ::after {\n      content: '\\u2192';\n      display: inline-block;\n      margin-left: 5px;\n    }\n  }\n`;\n\nexport default AppWrapper;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Board } from '../../components/Board';\nimport { makeStep, writeResult, prevBoard, nextBoard } from '../../redux/actions';\nimport { checkWinner } from '../../utils/helpers';\nimport { AppWrapper } from './App.style';\nimport { Button } from '../../common/Button';\n\nfunction App({ history, currentBoard, currentPlayer, setsPlayed, stepsLeft, result, dispatch }) {\n  const winner = checkWinner(history[currentBoard]);\n  if (winner) {\n    dispatch(writeResult(winner));\n  }\n\n  if (stepsLeft === 0) {\n    dispatch(writeResult('O'));\n  }\n\n  const stepHandler = index => {\n    if (history[currentBoard][index].value) {\n      return;\n    }\n    dispatch(makeStep(index, currentPlayer));\n  };\n\n  const nextHandler = () => {\n    dispatch(nextBoard());\n  };\n\n  const prevHandler = () => {\n    dispatch(prevBoard());\n  };\n\n  const isLastBoard = history.length - 1 === currentBoard;\n\n  return (\n    <AppWrapper>\n      <div className=\"history\">\n        <Button\n          className=\"history-btn--prev\"\n          label=\"Step Back\"\n          disabled={!currentBoard}\n          onClick={prevHandler}\n        />\n        <Button\n          className=\"history-btn--next\"\n          label=\"Step Forward\"\n          disabled={isLastBoard}\n          onClick={nextHandler}\n        />\n      </div>\n      <Board plan={history[currentBoard]} onCellClick={stepHandler} />\n      <div>\n        <p>Set played: {setsPlayed}</p>\n        <p>Player 1 wins: {result.X}</p>\n        <p>Player 2 wins: {result.O}</p>\n      </div>\n    </AppWrapper>\n  );\n}\n\nconst mapStateToProps = store => {\n  return {\n    history: store.history,\n    currentBoard: store.currentBoard,\n    currentPlayer: store.currentPlayer,\n    setsPlayed: store.setsPlayed,\n    stepsLeft: store.stepsLeft,\n    result: store.result,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { App } from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}